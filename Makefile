# Makefile para deploy no Cloudflare Pages
# Wasted Time Viewer - React + TypeScript + Vite

.PHONY: help clear install build clean deploy-info debug
.DEFAULT_GOAL := help

# Vari√°veis
SOURCE_DIR := frontend
BUILD_DIR := frontend/dist

# Cores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## Mostra esta mensagem de ajuda
	@echo "$(GREEN)Wasted Time Viewer - Makefile Simples$(NC)"
	@echo "$(YELLOW)Comandos dispon√≠veis:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

clean: ## Remove node_modules e arquivos de build (mant√©m package.json)
	@echo "$(YELLOW)üßπ Limpando projeto...$(NC)"
	rm -rf $(SOURCE_DIR)/node_modules
	rm -rf $(BUILD_DIR)
	rm -rf $(SOURCE_DIR)/.vite
	rm -rf $(SOURCE_DIR)/node_modules/.cache
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da! package.json mantido$(NC)"

install: clean ## Instala depend√™ncias com yarn
	@echo "$(GREEN)üì¶ Instalando depend√™ncias com yarn...$(NC)"
	cd $(SOURCE_DIR) && yarn install
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas com sucesso!$(NC)"

build: install ## Executa build da aplica√ß√£o
	@echo "$(GREEN)üî® Executando build...$(NC)"
	cd $(SOURCE_DIR) && yarn build
	@echo "$(GREEN)‚úÖ Build conclu√≠do! Arquivos em $(BUILD_DIR)$(NC)"

# Desenvolvimento local
dev: install ## Inicia servidor de desenvolvimento
	@echo "$(GREEN)üöÄ Iniciando servidor de desenvolvimento...$(NC)"
	cd $(SOURCE_DIR) && yarn dev

# Preview da build
preview: build ## Faz preview da build de produ√ß√£o
	@echo "$(GREEN)üëÄ Iniciando preview da build...$(NC)"
	cd $(SOURCE_DIR) && yarn preview

# Informa√ß√µes de deploy
deploy-info: ## Mostra informa√ß√µes para configura√ß√£o no Cloudflare Pages
	@echo "$(GREEN)üöÄ Configura√ß√£o para Cloudflare Pages:$(NC)"
	@echo "$(YELLOW)Build command:$(NC) make build"
	@echo "$(YELLOW)Build output directory:$(NC) frontend/dist"
	@echo "$(YELLOW)Root directory:$(NC) / (raiz do reposit√≥rio)"
	@echo ""
	@echo "$(GREEN)üìã Vari√°veis de ambiente:$(NC)"
	@echo "$(YELLOW)NODE_VERSION:$(NC) 18"

# Debug - mostra informa√ß√µes do ambiente
debug: ## Mostra informa√ß√µes de debug do ambiente
	@echo "$(GREEN)üêõ Informa√ß√µes de debug:$(NC)"
	@echo "$(YELLOW)Working directory:$(NC) $$(pwd)"
	@echo "$(YELLOW)Node version:$(NC) $$(node --version 2>/dev/null || echo 'Node n√£o encontrado')"
	@echo "$(YELLOW)Yarn version:$(NC) $$(yarn --version 2>/dev/null || echo 'Yarn n√£o encontrado')"
	@echo "$(YELLOW)Source directory exists:$(NC) $$(test -d $(SOURCE_DIR) && echo 'Sim' || echo 'N√£o')"
	@echo "$(YELLOW)Package.json exists:$(NC) $$(test -f $(SOURCE_DIR)/package.json && echo 'Sim' || echo 'N√£o')"
	@echo "$(YELLOW)Yarn.lock exists:$(NC) $$(test -f $(SOURCE_DIR)/yarn.lock && echo 'Sim' || echo 'N√£o')"
	@echo "$(YELLOW)Build directory exists:$(NC) $$(test -d $(BUILD_DIR) && echo 'Sim' || echo 'N√£o')"
	@if [ -d $(BUILD_DIR) ]; then \
		echo "$(YELLOW)Build files:$(NC)"; \
		ls -la $(BUILD_DIR) | head -10; \
	fi